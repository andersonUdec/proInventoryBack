openapi: 3.0.3
info: 
    title: Swagger for ProductWeb module_V
    version: 1.3.13
    description: Swagger for API by ProductWeb
    contact: 
      email: alejo8591@gmail.com, anderson97@hotmail.com
      name: Alejandro Romero, Anderson Suarez
    license: 
        name: Apache 2.0
        url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
    - url: 'http://localhost:3000/api/v1'
    - url: 'http://172.10.10.1:3000/api/v1'
tags:
    - name: users
      description: Operations about users
    - name: authentication/authorization
      description: Operations about auth & auth
paths:
  /users:
    get:
      tags: 
        - users
      summary:
        Get all users
      description: Get all users in the platform
      operationId: getAllUsers
      responses:
        '200':
          description: successful operationId
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref : '#/components/schemas/UserDetailResponse'
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /users/create:
    post:
      tags: 
        - users
      summary: Create users
      description:  This service for create users
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        required: true
      responses:
        '201':
          description: successful user create 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Bad request 
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not Found
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/NotFoundError'
  /users/{email}/detail:
    get:
      tags:
        - users
      summary: get user by email
      description: Detail user by email in the platform
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          description: The email that need to be fetched.
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operationId
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/UserDetailResponse'
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /users/{email}/update:
    put:
      tags:
        - users
      summary: Updated user by email
      description: Update User by email. This user can only change phone, first name, address, and last name, in the platform
      operationId: updateUserByEmail
      parameters:
        - name: email
          in: path
          description: The email that need to be fetched.
          required: true
          schema: 
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: successful operationId
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/UserDetailResponse'
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /users/{email}/delete:
    delete:
      tags:
        - users
      summary: Soft Delete user by email
      description: Soft delete User by email.
      operationId: deleteUserByEmail
      parameters:
        - name: email
          in: path
          description: The email that need to be fetched.
          required: true
          schema: 
            type: string 
      responses:
        '204':
          description: No content
          content: { }
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /users/{email}/updatePassword:
    put:
      tags:
        - users
      summary: Updated user password by email
      description: Update password by email. This user can only change password in the platform
      operationId: updateUserPasswordByEmailService
      parameters:
        - name: email
          in: path
          description: The email that need to be fetched.
          required: true
          schema: 
            type: string
      requestBody:
        description: Updated user password object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordUpdateRequest'
      responses:
        '200':
          description: successful operationId
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/UserDetailResponse'
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /auth/login:
    post:
      tags:
        - authentication/authorization
      summary: User authenticate by email and password
      description: Auth users on the platform by email and password, and generate token for session
      operationId: login
      requestBody:
        description: Auth user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthenticateRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserAuthenticateResponse'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /auth/logout:
    post:
      tags:
        - authentication/authorization
      summary: User logout by email and token
      description: Logout users on the platform by email and token, and destroy token for session
      operationId: logOut
      requestBody:
        description: Logout user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogoutRequest'
      responses:
        '204':
          description: No Content
          content: {}
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products:
    get:
      tags: 
        - products
      summary:
        Get all products
      description: Get all products in the platform
      operationId: getAllProducts
      responses:
        '200':
          description: successful operationId
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref : '#/components/schemas/ProductDetailResponse'
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Products Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/create:
    post:
      tags: 
        - products
      summary: Create products
      description: This service for create products
      operationId: createProduct
      requestBody:
        description: Created product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
        required: true
      responses:
        '201':
          description: Successful product create 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateResponse'
        '400':
          description: Bad request 
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not Found
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/NotFoundError'
  /products/{product_sku}/detail:
    get:
      tags:
        - products
      summary: Get product by product_sku
      description: Detail product by product_sku in the platform
      operationId: getProductBySKU
      parameters:
        - name: product_sku
          in: path
          description: The product_sku that need to be fetched.
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operationId
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/ProductDetailResponse'
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Product Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{product_sku}/update:
    put:
      tags:
        - products
      summary: Updated product by product_sku
      description: Update product by product_sku. This user can only change name, product_type, quantity, price, supplier, latitude and longitude, in the platform
      operationId: updateProductBySKU
      parameters:
        - name: product_sku
          in: path
          description: The product_sku that need to be fetched.
          required: true
          schema: 
            type: string
      requestBody:
        description: Update product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Successful operationId
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/ProductDetailResponse'
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Product Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{product_sku}/delete:
    delete:
      tags:
        - products
      summary: Soft Delete product by product_sku
      description: Soft delete product by product_sku.
      operationId: deleteProductBySKU
      parameters:
        - name: product_sku
          in: path
          description: The product_sku that need to be fetched.
          required: true
          schema: 
            type: string 
      responses:
        '204':
          description: No content
          content: { }
        '401':
          description: Invalid Token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Users Not Found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/NotFoundError'  
components:
  schemas:
    UserDetailResponse:
      type: object
      properties:
        id: 
          type: integer
          description: User id on DB
          format: int64
        email:
          type: string
          description: Username for login auth
        first_name:
          type: string
        last_name: 
          type: string
        document_type: 
          type: string
          description: Document type for document ID
        document_id:
          type: string
          description: User document ID
        phone:
          type: string
          description: phone by user
        address:
          type: string
          description: Principal address for User
        status:
          type: number
          description: code for user status
    UserCreateRequest:
      type: object
      properties:
        email:
          type: string
          description: email for user, is unique
        first_name:
          type: string
          description: All names for user
        last_name:
          type: string
          description: Lastname and surname for user
        document_type:
          type: string
          description: Document type for document ID
        document_id:
          type: string
          description: User document ID
        phone:
          type: string
          description: phone by user
        address:
          type: string
          description: Principal address for User
        password:
          type: string
          description: Send by base64 encoded
    UserCreateResponse:
      type: object
      properties: 
        message: 
          type: string
          description: successful create user
    UserUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          description: All names for user
        last_name:
          type: string
          description: Lastname and surname for user
        phone:
          type: string
          description: phone by user
        address:
          type: string
          description: Principal address for User
    UserPasswordUpdateRequest:
      type: object
      properties:
        passwordOld:
          type: string
          description: Old password user
        passwordNew:
          type: string
          description: New password user
    UserAuthenticateRequest:
      type: object
      properties:
        email:
          type: string
          description: email for user, is unique
        password:
          type: string
          description: Send by base64 encoded
    UserAuthenticateResponse:
      type: object
      properties:
        email:
          type: string
          description: email for user, is unique
        id: 
          type: integer
          description: User id on DB
          format: int64
        first_name:
          type: string
        last_name: 
          type: string
        document_type: 
          type: string
          description: Document type for document ID
        document_id:
          type: string
          description: User document ID
        phone:
          type: string
          description: phone by user
        address:
          type: string
          description: Principal address for User
        status:
          type: number
          description: code for user status
        token:
          type: string
          description: JWT for Auth
    UserLogoutRequest:
      type: object
      properties:
        email:
          type: string
          description: email for user, is unique
        date:
          type: string
          description: datetime for logout
    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          description: Invalid Token
    NotFoundError:
      type: object
      properties:
        code:
          type: number
          description: HTTP Status 404
        message:
          type: string
          description: Not found
    BadRequestError:
      type: object
      properties: 
        error_number:
          type: number
          description: Number of error
        message:
          type: string
          description: message for error description
    ProductDetailResponse:
      type: object
      properties:
        product_sku: 
          type: string
          description: ProductSKU on DB
        name:
          type: string
          description: Product name
        product_type:
          type: integer
          description: Id product type
          format: int64
        quantity: 
          type: integer
          description: Product quantity
          format: int64
        price: 
          type: number 
          description: Product price in float or double, check whith teacher 
          format: float
        supplier:
          type: string
          description: Product supplier
        latitude:
          type: number
          description: Product latitude in float like 4.694349160479399
          format: float
        longitude:
          type: number
          description: Product longitude in float like -74.07952520671645
          format: float 
        status:
          type: integer
          description: Code for product status
    ProductCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
        product_type:
          type: integer
          description: Id product type
          format: int64
        quantity: 
          type: integer
          description: Product quantity
          format: int64
        price: 
          type: number 
          description: Product price in float or double, check whith teacher 
          format: float
        supplier:
          type: string
          description: Product supplier
        latitude:
          type: number
          description: Product latitude in float like 4.694349160479399
          format: float
        longitude:
          type: number
          description: Product longitude in float like -74.07952520671645
          format: float
    ProductCreateResponse:
      type: object
      properties: 
        message: 
          type: string
          description: Successful create product  
    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name for product
        product_type:
          type: integer
          description: Id type of product for product
        quantity:
          type: integer
          description: Quantity for product
        price:
          type: number
          description: Price for product in float
          format: float  
        supplier:
          type: string
          description: Product supplier
        latitude:
          type: number
          description: City latitude in float format like 4.699139537085148
          format: float  
        longitude:
          type: number
          description: City longitude in float format like -74.07952520671645
          format: float